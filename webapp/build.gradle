plugins {
    id 'war'
}

war {
    archiveBaseName = 'ariadari'
    archiveVersion = '1.0.0'
    archiveFileName = archiveBaseName.get() + ".war"
    // Other configuration options for the WAR file...
}

dependencies {
    implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect:3.2.0'

    //  Webjars
    implementation 'org.webjars:jquery:3.6.0'
    implementation 'org.webjars:bootstrap:5.2.0'
    implementation 'org.webjars.npm:bootstrap-icons:1.10.3'
    implementation "org.webjars:tinymce:5.0.9"
    implementation 'org.webjars:webjars-locator-core:0.52'


    // Utilities
    //  Password validation
    implementation 'org.passay:passay:1.6.2'
    //  Mapstruct
    implementation 'org.mapstruct:mapstruct:1.5.3.Final'

	//  Temporary explicit version to fix Thymeleaf bug
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6:3.1.1.RELEASE'
	implementation 'org.springframework.security:spring-security-test'

    //development
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
    developmentOnly 'org.springframework.boot:spring-boot-starter-actuator'
	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
	runtimeOnly 'com.mysql:mysql-connector-j'
}

// Copy scripts directory to build
processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE

    from('src/main/resources/scripts') {
        include '**'
    }
}

tasks.named('test') {
	useJUnitPlatform()
}

task deleteBuild(type: Delete) {
    delete "$buildDir/exploded"
}

task explodedWar(type: Copy, dependsOn: deleteBuild) {
    into "$buildDir/exploded"
    with war
}

/*
task createStartupScript(type: WriteProperties) {
    outputFile = file("$buildDir/libs/run-cli.sh")
    text = "#!/bin/sh\njava -cp \"my-cli.jar:lib/*\" com.example.prof.cli.Cli"
    outputFile.setExecutable(true)
}*/


